% !Mode:: "TeX:UTF-8"

@INPROCEEDINGS{cnproceed,
	author    = {王重阳 and 黄药师 and 欧阳峰 and 洪七公 and 段皇帝},
	title     = {武林高手从入门到精通},
	booktitle = {第~$N$~次华山论剑},
	year      = 2006,
	address   = {西安, 中国},
	month     = sep,
	language   ="zh",
}

@ARTICLE{cnarticle,
	AUTHOR  = "贾宝玉 and 林黛玉 and 薛宝钗 and 贾探春",
	TITLE   = "论刘姥姥食量大如牛之现实意义",
	JOURNAL = "红楼梦杂谈",
	PAGES   = "260--266",
	VOLUME  = "224",
	YEAR    = "1800",
	language   ="zh",
}


@inbook{Lin1992,
	language   ="zh",
	AUTHOR     = "林来兴",
	TITLE      = "空间控制技术",
	PUBLISHER  = "宇航出版社",
	YEAR       = "1992",
	Pages      = "25-42",
	ADDRESS    = "北京",
}

@book{xin1994,
	language   ="zh",
	title={信息技术与信息服务国际研讨会论文集},
	author={辛希孟 and 中国科学院文献信息中心 and 孟广均 and 信息学},
	year={1994},
	publisher={中国社会科学出版社},
	pages={45-49},
	address={北京},
	typeoflit={C},
}

@book{zhao1998,
	language   ="zh",
	title={新时代的工业工程师},
	author={赵耀东},
	year={1998},
	citedate =     {1998-09-26},
	address={台北},
	publisher={天下文化出版社},
	url={http://www.ie.nthu.edu.tw/info/ie.newie.htm(Big5)},
	typeoflit={M/OL},
}

@phdthesis{Chen1992,
	language   ="zh",
	Author = {谌颖},
	Title = {空间最优交会控制理论与方法研究},
	ADDRESS    = "哈尔滨",
	School = {哈尔滨工业大学},
	Year = {1992},
	pages= {8-13},
}

@article{hithesis2017,
	title={Hi!Thesis!,Harbin Institue of Technology},
	author={Yanshuo Chu},
	journal={Github},
	volume={001},
	number={0001},
	pages={000-999},
	year={2017},
}

@article{NUNEZVARELA2017164,
title = {Source code metrics: A systematic mapping study},
journal = {Journal of Systems and Software},
volume = {128},
pages = {164-197},
year = {2017},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2017.03.044},
url = {https://www.sciencedirect.com/science/article/pii/S0164121217300663},
author = {Alberto S. Nuñez-Varela and Héctor G. Pérez-Gonzalez and Francisco E. Martínez-Perez and Carlos Soubervielle-Montalvo},
keywords = {Source code metrics, Software metrics, Object-oriented metrics, Aspect-oriented metrics, Feature-oriented metrics, Systematic mapping study},
abstract = {Context
Source code metrics are essential components in the software measurement process. They are extracted from the source code of the software, and their values allow us to reach conclusions about the quality attributes measured by the metrics.
Objectives
This paper aims to collect source code metrics related studies, review them, and perform an analysis, while providing an overview on the current state of source code metrics and their current trends.
Method
A systematic mapping study was conducted. A total of 226 studies, published between the years 2010 and 2015, were selected and analyzed.
Results
Almost 300 source code metrics were found. Object oriented programming is the most commonly studied paradigm with the Chidamber and Kemerer metrics, lines of code, McCabe's cyclomatic complexity, and number of methods and attributes being the most used metrics. Research on aspect and feature oriented programming is growing, especially for the current interest in programming concerns and software product lines.
Conclusions
Object oriented metrics have gained much attention, but there is a current need for more studies on aspect and feature oriented metrics. Software fault prediction, complexity and quality assessment are recurrent topics, while concerns, big scale software and software product lines represent current trends.}
}

@article{Ardito2020,
author = {Ardito, Luca and Coppola, Riccardo and Barbato, Luca and Verga, Diego},
title = {A Tool-Based Perspective on Software Code Maintainability Metrics: A Systematic Literature Review},
journal = {Scientific Programming},
volume = {2020},
number = {1},
pages = {8840389},
doi = {https://doi.org/10.1155/2020/8840389},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1155/2020/8840389},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1155/2020/8840389},
abstract = {Software maintainability is a crucial property of software projects. It can be defined as the ease with which a software system or component can be modified to be corrected, improved, or adapted to its environment. The software engineering literature proposes many models and metrics to predict the maintainability of a software project statically. However, there is no common accordance with the most dependable metrics or metric suites to evaluate such nonfunctional property. The goals of the present manuscript are as follows: (i) providing an overview of the most popular maintainability metrics according to the related literature; (ii) finding what tools are available to evaluate software maintainability; and (iii) linking the most popular metrics with the available tools and the most common programming languages. To this end, we performed a systematic literature review, following Kitchenham’s SLR guidelines, on the most relevant scientific digital libraries. The SLR outcome provided us with 174 software metrics, among which we identified a set of 15 most commonly mentioned ones, and 19 metric computation tools available to practitioners. We found optimal sets of at most five tools to cover all the most commonly mentioned metrics. The results also highlight missing tool coverage for some metrics on commonly used programming languages and minimal coverage of metrics for newer or less popular programming languages. We consider these results valuable for researchers and practitioners who want to find the best selection of tools to evaluate the maintainability of their projects or to bridge the discussed coverage gaps for newer programming languages.},
year = {2020}
}

