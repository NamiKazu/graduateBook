% !Mode:: "TeX:UTF-8"

@article{NUNEZVARELA2017164,
title = {Source code metrics: A systematic mapping study},
journal = {Journal of Systems and Software},
volume = {128},
pages = {164-197},
year = {2017},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2017.03.044},
url = {https://www.sciencedirect.com/science/article/pii/S0164121217300663},
author = {Alberto S. Nuñez-Varela and Héctor G. Pérez-Gonzalez and Francisco E. Martínez-Perez and Carlos Soubervielle-Montalvo},
keywords = {Source code metrics, Software metrics, Object-oriented metrics, Aspect-oriented metrics, Feature-oriented metrics, Systematic mapping study},
abstract = {Context
Source code metrics are essential components in the software measurement process. They are extracted from the source code of the software, and their values allow us to reach conclusions about the quality attributes measured by the metrics.
Objectives
This paper aims to collect source code metrics related studies, review them, and perform an analysis, while providing an overview on the current state of source code metrics and their current trends.
Method
A systematic mapping study was conducted. A total of 226 studies, published between the years 2010 and 2015, were selected and analyzed.
Results
Almost 300 source code metrics were found. Object oriented programming is the most commonly studied paradigm with the Chidamber and Kemerer metrics, lines of code, McCabe's cyclomatic complexity, and number of methods and attributes being the most used metrics. Research on aspect and feature oriented programming is growing, especially for the current interest in programming concerns and software product lines.
Conclusions
Object oriented metrics have gained much attention, but there is a current need for more studies on aspect and feature oriented metrics. Software fault prediction, complexity and quality assessment are recurrent topics, while concerns, big scale software and software product lines represent current trends.}
}

@article{Ardito2020,
  title={A Tool-Based Perspective on Software Code Maintainability Metrics: A Systematic Literature Review},
  author={ Ardito, Luca  and  Coppola, Riccardo  and  Barbato, Luca  and  Verga, Diego },
  journal={Scientific Programming},
  number={8840389},
  year={2020},
}

@article{QU2015193,
title = {Exploring community structure of software Call Graph and its applications in class cohesion measurement},
journal = {Journal of Systems and Software},
volume = {108},
pages = {193-210},
year = {2015},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2015.06.015},
url = {https://www.sciencedirect.com/science/article/pii/S0164121215001259},
author = {Yu Qu and Xiaohong Guan and Qinghua Zheng and Ting Liu and Lidan Wang and Yuqiao Hou and Zijiang Yang},
keywords = {Class cohesion metrics, Complex network, Community structure},
abstract = {Many complex networked systems exhibit natural divisions of network nodes. Each division, or community, is a densely connected subgroup. Such community structure not only helps comprehension but also finds wide applications in complex systems. Software networks, e.g., Class Dependency Networks, are such networks with community structures, but their characteristics at the function or method call granularity have not been investigated, which are useful for evaluating and improving software intra-class structure. Moreover, existing proposed applications of software community structure have not been directly compared or combined with existing software engineering practices. Comparison with baseline practices is needed to convince practitioners to adopt the proposed approaches. In this paper, we show that networks formed by software methods and their calls exhibit relatively significant community structures. Based on our findings we propose two new class cohesion metrics to measure the cohesiveness of object-oriented programs. Our experiment on 10 large open-source Java programs validate the existence of community structures and the derived metrics give additional and useful measurement of class cohesion. As an application we show that the new metrics are able to predict software faults more effectively than existing metrics.}
}

@inproceedings{2021BBregLocator,
  title={BBregLocator: A Vulnerability Detection System Based on Bounding Box Regression},
  author={ Tian, Junfeng  and  Zhang, Junkun  and  Liu, Fanming },
  booktitle={2021 51st Annual IEEE/IFIP International Conference on Dependable Systems and Networks Workshops (DSN-W)},
  year={2021},
}

@article{Sheneamer2018A,
  title={A detection framework for semantic code clones and obfuscated code},
  author={Sheneamer and Abdullah and Roy and Swarup and Kalita and Jugal},
  journal={Expert Systems with Application},
  year={2018},
}

@inproceedings{2014A,
  title={A Scalable Approach for Vulnerability Discovery Based on Security Patches},
  author={ Li, Hongzhe  and  Kwon, Hyuckmin  and  Kwon, Jonghoon  and  Lee, Heejo },
  booktitle={International Conference on Applications & Techniques in Information Security},
  year={2014},
}

@article{2012Mitigating,
  title={Mitigating program security vulnerabilities: Approaches and challenges},
  author={ Shahriar, Hossain  and  Zulkernine, Mohammad },
  journal={ACM Computing Surveys},
  volume={44},
  number={3},
  pages={1-46},
  year={2012},
}

@article{2017IDE,
  title={IDE Plugins for Detecting Input-Validation Vulnerabilities},
  author={ Baset, Aniqua Z.  and  Denning, Tamara },
  journal={IEEE},
  year={2017},
}

@inproceedings{2016How,
  title={How to find and fix software vulnerabilities with coverity static analysis},
  author={ Baloglu, Bill },
  booktitle={Cybersecurity Development},
  year={2016},
}

@article{2017Assessment,
  title={Assessment of Vulnerability Severity using Text Mining},
  author={ Spanos, Georgios  and  Angelis, Lefteris  and  Toloudis, Dimitrios },
  journal={ACM},
  pages={1-6},
  year={2017},
}

@article{2018A,
  title={A Multi-Target Approach to Estimate Software Vulnerability Characteristics and Severity Scores},
  author={ Spanos, Georgios  and  Angelis, Lefteris },
  journal={Journal of Systems and Software},
  volume={146},
  number={DEC.},
  pages={152-166},
  year={2018},
}

@article{2020The,
  title={The effect of Bellwether analysis on software vulnerability severity prediction models},
  author={ Kudjo, Patrick Kwaku  and  Chen, Jinfu  and  Mensah, Solomon  and  Amankwah, Richard  and  Kudjo, Christopher },
  journal={Software Quality Journal},
  volume={28},
  number={1},
  pages={1-34},
  year={2020},
}

@article{2015Exploring,
  title={Exploring community structure of software Call Graph and its applications in class cohesion measurement},
  author={ Qu, Yu  and  Guan, Xiaohong  and  Zheng, Qinghua  and  Liu, Ting  and  Wang, Lidan  and  Hou, Yuqiao  and  Yang, Zijiang },
  journal={Journal of Systems & Software},
  volume={108},
  number={oct.},
  pages={193-210},
  year={2015},
}

@article{2012A,
  title={A Software Quality Evaluation Method Using the Change of Source Code Metrics},
  author={ Nakamura, Mitsuhiro  and  Hamagami, Tomoki },
  journal={IEEE},
  year={2012},
}

@article{2012Framework,
  title={Framework for evaluation and validation of software complexity measures},
  author={ Misra, S  and  Akman, I  and  Colomo-Palacios, R },
  journal={Iet Software},
  volume={6},
  number={4},
  pages={323-334},
  year={2012},
}

@inproceedings{2012Asuite,
  title={A Suite of Cognitive Complexity Metrics},
  author={ Misra, Sanjay  and  Koyuncu, Murat  and  Crasso, Marco  and  Mateos, Cristian  and  Zunino, Alejandro },
  booktitle={International Conference on Computational Science & Its Applications},
  year={2012},
}

@article{2010Assessing,
  title={Assessing traditional and new metrics for object-oriented systems},
  author={ Concas, Giulio  and  Marchesi, Michele  and  Murgia, Alessandro  and  Pinna, Sandro  and  Tonelli, Roberto },
  journal={ACM},
  year={2010},
}

@article{陈振强2003,
  title={一种基于依赖性分析的类内聚度度量方法},
  author={陈振强 and 徐宝文},
  journal={软件学报},
  volume={14},
  number={11},
  pages={8},
  year={2003},
}

@article{马健2018,
  title={面向对象软件耦合度量方法},
  author={马健 and 刘峰 and 樊建平},
  journal={北京邮电大学学报},
  volume={41},
  number={1},
  pages={6},
  year={2018},
}

@article{1993Object,
  title={Object-oriented metrics that predict maintainability},
  author={ Li, Wei  and  Henry, Sallie },
  journal={Journal of Systems & Software},
  volume={23},
  number={2},
  pages={111-122},
  year={1993},
}

@book{Arnold1996,
author = {Arnold, Robert S.},
title = {Software Change Impact Analysis},
year = {1996},
isbn = {0818673842},
publisher = {IEEE Computer Society Press},
address = {Washington, DC, USA},
abstract = {From the Publisher:As software systems become increasingly large and complex, the need increases to predict and control the effects of software changes. Software Change Impact Analysis captures the latest information on the science and art of determining what software parts affect each other. It provides a battery of ideas for doing impact analysis better, presents a framework for the field, and focuses attention on important results. You will gain a healthy respect for the strengths and limitations of impact analysis technology and a solid background that will prove valuable for years to come. The book identifies key impact analysis definitions and themes and illustrates the important themes to give you a solid understanding for tackling impact analysis problems. It includes reports on software source code dependency analysis and software traceability analysis and shows how results from both areas can more effectively support impact analysis in software engineering repositories. It also describes why impact representation and determination techniques are at the heart of both source dependency analysis and traceability analysis.}
}

@article{2013Large,
  title={Large-Scale Enterprise Systems: Changes and Impacts},
  author={ Chen, Wen  and  Iqbal, Asif  and  Abdrakhmanov, Akbar  and  Parlar, Jay  and  Wassyng, Alan },
  journal={lecture notes in business information processing},
  year={2013},
}


